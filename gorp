#!/usr/bin/env python3


import os, sys, logging, time, pprint, warnings, argparse, re, configparser, shutil

PROJECT_PATTERN = '^\w+-\d+$' # ex: AAA-NNNNN 

warnings.filterwarnings('ignore')
ME = os.path.basename(sys.argv[0])
loggingFormat='%(asctime)s %(filename)s: %(message)s'
logging.basicConfig(stream=sys.stderr, level=logging.WARNING, format=loggingFormat)
logger = logging.getLogger(ME)
start_time = time.time()
configIni = {}
config = {}

# File Locations
ENV_PROJECT_TREE = "{}_PROJECTS".format(ME).upper()
PROJECT_TREE = os.environ.get(ENV_PROJECT_TREE)
CONFIG_DIR = "{}/config".format(PROJECT_TREE)
CONFIG_FILE="{}/config.ini".format(CONFIG_DIR)

def bomb(chunk):
	logger.error("%s",chunk)
	sys.exit(1)

def majorModeHandler(arg):
    """
    Given the MODEorPROJECT agument, we will determine if we are a per-project or major mode
    Per-project could be a project ID, Filesystem directory (or .) or search criteria.
    """
    # Convert to list if not
    if not isinstance(arg,(list,)): arg = [arg]

    if os.path.isdir(arg[0]):
        logger.debug("Argument [{}] is a directory".format(arg[0]))
    elif isProjectId(arg[0]):
        logger.debug("Argument [{}] is a Project ID".format(arg[0]))
    elif isSearch(arg[0]):
        logger.debug("Argument [{}] is a Search".format(arg[0]))
    else:
        logger.debug("Argument [{}] must be a major mode".format(arg[0]))
        handleMajorMode(arg)

def isProjectId(arg):
    if re.match(PROJECT_PATTERN, arg, re.ASCII): return True
    return False

def isSearch(arg):
    if re.match('^\/', arg, re.ASCII): return True
    return False

def handleMajorMode(arg):

    # execute built-in major mode, search plugins next
    testArg = arg[0].lower()
    if testArg == "init":
        initTree(arg[1:])
    elif testArg == "list":
        bomb("not implemented")
    elif testArg == "new":
        bomb("not implemented")
    else:
        searchMajorPlugins(arg)


def initTree(arg):
    defaultConfig()
    PROJECT_TREE_BASE = os.path.dirname(PROJECT_TREE)
    if not os.path.isdir(PROJECT_TREE_BASE):
        bomb("Can not init tree, parent directory [{}] is missing or not a directory".format(PROJECT_TREE_BASE))
    if os.path.exists(PROJECT_TREE):
        bomb("Can not init tree, PROJECT_TREE directory [{}] already exists".format(PROJECT_TREE))
    os.umask(config['UMASK'])
    ourMkdir(PROJECT_TREE)
    ourMkdir(CONFIG_DIR)
    with open(CONFIG_FILE, 'w') as cf:
        configIni.write(cf)

def defaultConfig():
    global configIni, config
    configIni = configparser.ConfigParser()
    configIni['default'] = {
            "DIRMODE" : 0o2770,
            "FILEMODE": 0o0660,
            "UMASK"     : 0o0007,
            "GROUP"     : "wheel"
            }
    config = configIni['default']

def ourMkdir(dir):
    mkdir(dir,mode=config['DIRMODE'])
    if config['GROUP']:
        shutil.chown(dir,group=config['GROUP'])

def searchMajorPlugins(arg):
    bomb("search not implemented")

if not PROJECT_TREE:
    bomb("PROJECT_TREE is not set, Check environment variable {}".format(ENV_PROJECT_TREE))

parser = argparse.ArgumentParser()
parser.add_argument("-v", "--verbose",  help="increase output verbosity", action="store_true")
parser.add_argument("-d", "--debug",    help="enable debugging output", action="store_true")
parser.add_argument("MODEorPROJECT",    help="provide a major MODE or PROJECT identifier", default="list", nargs='*')
args = parser.parse_args()


if args.verbose:
    logger.setLevel(logging.INFO)
if args.debug:
    logger.setLevel(logging.DEBUG)


majorModeHandler(args.MODEorPROJECT)
bomb("MODEorPROJECT=[{}]".format(args.MODEorPROJECT))
